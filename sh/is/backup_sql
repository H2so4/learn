#!/usr/bin/env bash
#Ixpan, 2011
#Dump, compress & upload every DB
#TODO 06-05-2011 03:01 => check options such as $RunFtp...
#TODO 06-05-2011 02:28 => make postgres compatible

#DEPENDENCES:
#   [+] LFTP $ sudo apt-get install lftp

#TODO 14-04-2011 11:35 => Use less tmp files & more pipes

#=== Global Settings ==================
#BackupDir="/home/webpm/intalio/sqlbackup"
BackupDir="$HOME/misc/conf/ubuntu-netbook/sql"
LocalMax="5"
DbHost="localhost"
DbUser="root"
DbPasswd=""
CompressBin="/bin/tar -czvf"
RunDbDump=True
RunCompress=True
#RunFtp=True
#FTP SERVER Login info
#FtpUser="respaldosaas@ixpan.com.mx"
#FtpPasswd=""
#FtpHost="ftp.ixpan.com.mx"
#FtpMax="5"
#FtpDir="e-facts_192.168.1.250_db_backup"

#=== Initial vars =====================
#YYYYMMDD
DirectoryName=$(/bin/date +"%Y%m%d")

. /etc/lsb-release
if [ "$DISTRIB_ID" = Ubuntu ]; then
    BASENAME="/usr/bin/basename"
    SORT="/usr/bin/sort"
else #centos
    BASENAME="/bin/basename"
    SORT="/bin/sort"
fi
ECHO="/bin/echo"
MKDIR="/bin/mkdir"
RM="/bin/rm"
CURL="/usr/bin/curl"
LFTP="/usr/bin/lftp"
GREP="/bin/grep"
AWK="/usr/bin/awk"
TAIL="/usr/bin/tail"
UNIQ="/usr/bin/uniq"
CAT="/bin/cat"
SED="/bin/sed"
XARGS="/usr/bin/xargs"

#=== Folder managment ================
$ECHO "Folder Management: Start"
#Make sure root backup directory exists
[ ! -d "$BackupDir" ] && $MKDIR -p $BackupDir

#Create new backup directory for current "this" backup/dump
if [ -d "$BackupDir/$DirectoryName" ]; then
    $ECHO "Folder Management: RM $BackupDir/$DirectoryName"
    $RM -rf "$BackupDir/$DirectoryName"
    $ECHO "Folder Management: MKDIR $BackupDir/$DirectoryName"
    $MKDIR "$BackupDir/$DirectoryName"
else
    $ECHO "Folder Management: MKDIR $BackupDir/$DirectoryName"
    $MKDIR "$BackupDir/$DirectoryName"
fi
#Check local old archives, keeping only $LocalMax
$ECHO "Folder Management: Checking old local archives"
files=($BackupDir/*tar.gz)
for i in "${files[@]}"; do #add \n
    $ECHO $($BASENAME $i) >> /tmp/LocalAllFiles.tmp
done
$CAT /tmp/LocalAllFiles.tmp | $SORT -n | $TAIL -$LocalMax > /tmp/LocalMaxFiles.tmp

if [ -e /tmp/LocalMaxFiles.tmp ]; then
    files_to_delete_locally=$($CAT /tmp/LocalAllFiles.tmp | $SORT -n | $SORT /tmp/LocalMaxFiles.tmp /tmp/LocalMaxFiles.tmp -| $UNIQ -u)
fi

if [ "$files_to_delete_locally" = "" ]; then
    $ECHO "Folder Management: Nothing to delete"
else
    #ADD path, fuck!, it was simpler than I though!
    #files_to_delete_locally=( "${files_to_delete_locally[@]/#/$BackupDir/}" )
    #/bin/echo ${files_to_delete_locally[@]} > /tmp/files_to_delete_locally.tmp
    for j in $files_to_delete_locally; do #add \n
        $ECHO $j >> /tmp/files_to_delete_locally.tmp
    done
    $ECHO "Folder Management: About to delete $($CAT /tmp/files_to_delete_locally.tmp)"
    $CAT /tmp/files_to_delete_locally.tmp | $SED "s:^:$BackupDir/:" | $XARGS $RM
    #/bin/cat /tmp/files_to_delete_locally.tmp | /usr/bin/xargs -s 50000 echo |\
    #xargs -I# -s 100000 /bin/rm  $BackupDir/#
fi
$RM -rf /tmp/files_to_delete_locally.tmp /tmp/LocalMaxFiles.tmp /tmp/LocalAllFiles.tmp
$ECHO "Folder Management: End"

#=== Dump db ==========================
if [ "$RunDbDump" ]; then
    $ECHO "Database Backup: Start"
    MYSQL="$(which mysql)"
    MYSQLDUMP="$(which mysqldump)"
    DBS="$($MYSQL -u $DbUser -h $DbHost -p$DbPasswd -Bse 'show databases')"
    for db in $DBS
    do
        $MYSQLDUMP -u $DbUser -h $DbHost -p$DbPasswd $db > $BackupDir/$DirectoryName/$db.sql
        $ECHO " - Database: $db"
    done
    $ECHO "Database Backup: End"
fi

#=== Compress =========================
if [ "$RunDbDump" ] && [ "$RunCompress" ]; then
    $ECHO "Compression: Start"
    $ECHO "Compression: TAR.GZ"
    files=($BackupDir/$DirectoryName/*sql)
    $CompressBin $BackupDir/$DirectoryName"_db.tar.gz" "${files[@]}"
#Remove the flatfile database backups
    $ECHO "Compression: RM $BackupDir/$DirectoryName"
    $RM -rf "$BackupDir/$DirectoryName"
    $ECHO "Compression: End"
else
    $ECHO "Compression: Failed, you must enable dump first"
    $ECHO "Compression: End"
fi

#=== Upload ===========================
if [ "$RunFtp" ]; then
    $ECHO "Upload: Start"
    BackupFile=$BackupDir/$DirectoryName"_db.tar.gz"
    #Extract the local file name and extension only from its path
    FileName=$($BASENAME $BackupFile)

    #Connect, abort and return error message on failure
    $CURL -s $FtpHost --user $FtpUser:$FtpPasswd 2>&1 > /dev/null
    if [ $? = -1 ]; then
        $ECHO "Upload: Couldn't connect, check you network settings"
    fi

    #Change directory remotely, abort and return error message on failure
    $LFTP -u $FTPU,$FTPP $FTPS -e "cd $FtpDir; quit"
    if [ $? = -1 ]; then
        $LFTP -u $FTPU,$FTPP $FTPS -e "mkdir $FtpDir; quit"
        if [ $? = -1 ]; then
            $ECHO "Upload: Couldn't create the dir, check permitions"
        fi
    fi

    #Upload the file, abort and return error message on failure
    #/usr/bin/curl -s -T $BackupDir/$DirectoryName"_db.tar.gz" ftp://$FtpUser/$FtpDir/$FileName --user $FtpUser:$FtpPasswd
    if [ $? = -1 ]; then
        $ECHO "Upload: Couldn't upload the backup"
    else
        $ECHO "Upload: Correct"
    fi

    #Check max uploads and delete old archives
    $ECHO "Upload: Checking old archives"
    $CURL $FtpHost/$FtpDir/ --user $FtpUser:$FtpPasswd -s| $GREP ^- | $AWK '{print $9}'|\
    $SORT -n | $TAIL -$FtpMax > /tmp/FtpMaxFiles.tmp

    if [ -e /tmp/FtpMaxFiles.tmp ]; then
        files_to_delete=$($CURL $FtpHost/$FtpDir/ --user $FtpUser:$FtpPasswd -s| $GREP ^- |\
        $AWK '{print $9}'| $SORT -n | $SORT /tmp/FtpMaxFiles.tmp /tmp/FtpMaxFiles.tmp -| $UNIQ -u)
    else
        $ECHO "Couldn't query the ftp, check your connection"
        exit -1
    fi

    if [ "$files_to_delete" = "" ]; then
        $ECHO "Upload: Nothing to delete"
    else
        $ECHO $files_to_delete > /tmp/files_to_delete.tmp
        $ECHO "Upload: About to delete $($CAT /tmp/files_to_delete.tmp)"
        $LFTP -u $FtpUser,$FtpPasswd $FtpHost -e \
        "cd $FtpDir/; rm $($CAT /tmp/files_to_delete.tmp); quit"
    fi
    $ECHO "Upload: End"
    #/bin/rm -rf /tmp/files_to_delete.tmp /tmp/FtpMaxFiles.tmp
fi
